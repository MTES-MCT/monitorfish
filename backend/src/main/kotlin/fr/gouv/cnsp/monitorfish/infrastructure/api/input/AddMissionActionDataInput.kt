package fr.gouv.cnsp.monitorfish.infrastructure.api.input

import com.neovisionaries.i18n.CountryCode
import fr.gouv.cnsp.monitorfish.domain.entities.mission_actions.*
import java.time.ZonedDateTime

data class AddMissionActionDataInput(
    var missionId: Int,
    var vesselId: Int? = null,
    var vesselName: String? = null,
    var internalReferenceNumber: String? = null,
    var externalReferenceNumber: String? = null,
    var ircs: String? = null,
    var flagState: CountryCode,
    var districtCode: String? = null,
    var faoAreas: List<String> = listOf(),
    var flightGoals: List<FlightGoal> = listOf(),
    var actionType: MissionActionType,
    var actionDatetimeUtc: ZonedDateTime,
    var emitsVms: ControlCheck? = null,
    var emitsAis: ControlCheck? = null,
    var logbookMatchesActivity: ControlCheck? = null,
    var licencesMatchActivity: ControlCheck? = null,
    var speciesWeightControlled: Boolean? = null,
    var speciesSizeControlled: Boolean? = null,
    var separateStowageOfPreservedSpecies: ControlCheck? = null,
    var logbookInfractions: List<LogbookInfraction> = listOf(),
    var licencesAndLogbookObservations: String? = null,
    var gearInfractions: List<GearInfraction> = listOf(),
    var speciesInfractions: List<SpeciesInfraction> = listOf(),
    var speciesObservations: String? = null,
    var seizureAndDiversion: Boolean? = null,
    var otherInfractions: List<OtherInfraction> = listOf(),
    var numberOfVesselsFlownOver: Int? = null,
    var unitWithoutOmegaGauge: Boolean? = null,
    var controlQualityComments: String? = null,
    var feedbackSheetRequired: Boolean? = null,
    var segments: List<FleetSegment> = listOf(),
    var facade: String? = null,
    var longitude: Double? = null,
    var latitude: Double? = null,
    var portLocode: String? = null,
    var seizureAndDiversionComments: String? = null,
    var otherComments: String? = null,
    var gearOnboard: List<GearControl> = listOf(),
    var userTrigram: String,
    var speciesOnboard: List<SpeciesControl> = listOf(),
    var vesselTargeted: ControlCheck? = null,
    var hasSomeGearsSeized: Boolean = false,
    var hasSomeSpeciesSeized: Boolean = false,
    var closedBy: String? = null,
    val isFromPoseidon: Boolean? = null,
    var isAdministrativeControl: Boolean? = null,
    var isComplianceWithWaterRegulationsControl: Boolean? = null,
    var isSafetyEquipmentAndStandardsComplianceControl: Boolean? = null,
    var isSeafarersControl: Boolean? = null,
) {
    fun toMissionAction() = MissionAction(
        vesselId = vesselId,
        vesselName = vesselName,
        internalReferenceNumber = internalReferenceNumber,
        externalReferenceNumber = externalReferenceNumber,
        ircs = ircs,
        flagState = flagState,
        districtCode = districtCode,
        faoAreas = faoAreas,
        flightGoals = flightGoals,
        missionId = missionId,
        actionType = actionType,
        actionDatetimeUtc = actionDatetimeUtc,
        emitsVms = emitsVms,
        emitsAis = emitsAis,
        logbookMatchesActivity = logbookMatchesActivity,
        licencesMatchActivity = licencesMatchActivity,
        speciesWeightControlled = speciesWeightControlled,
        speciesSizeControlled = speciesSizeControlled,
        separateStowageOfPreservedSpecies = separateStowageOfPreservedSpecies,
        logbookInfractions = logbookInfractions,
        licencesAndLogbookObservations = licencesAndLogbookObservations,
        gearInfractions = gearInfractions,
        speciesInfractions = speciesInfractions,
        speciesObservations = speciesObservations,
        seizureAndDiversion = seizureAndDiversion,
        otherInfractions = otherInfractions,
        numberOfVesselsFlownOver = numberOfVesselsFlownOver,
        unitWithoutOmegaGauge = unitWithoutOmegaGauge,
        controlQualityComments = controlQualityComments,
        feedbackSheetRequired = feedbackSheetRequired,
        segments = segments,
        facade = facade,
        longitude = longitude,
        latitude = latitude,
        portLocode = portLocode,
        seizureAndDiversionComments = seizureAndDiversionComments,
        otherComments = otherComments,
        gearOnboard = gearOnboard,
        speciesOnboard = speciesOnboard,
        userTrigram = userTrigram,
        vesselTargeted = vesselTargeted,
        isDeleted = false,
        hasSomeGearsSeized = hasSomeGearsSeized,
        hasSomeSpeciesSeized = hasSomeSpeciesSeized,
        closedBy = closedBy,
        isFromPoseidon = isFromPoseidon ?: false,
        isAdministrativeControl = isAdministrativeControl,
        isComplianceWithWaterRegulationsControl = isComplianceWithWaterRegulationsControl,
        isSafetyEquipmentAndStandardsComplianceControl = isSafetyEquipmentAndStandardsComplianceControl,
        isSeafarersControl = isSeafarersControl,
    )
}
