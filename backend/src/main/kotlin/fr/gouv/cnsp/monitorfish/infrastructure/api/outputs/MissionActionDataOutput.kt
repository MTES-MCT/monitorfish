package fr.gouv.cnsp.monitorfish.infrastructure.api.outputs

import com.neovisionaries.i18n.CountryCode
import fr.gouv.cnsp.monitorfish.domain.entities.control_units.LegacyControlUnit
import fr.gouv.cnsp.monitorfish.domain.entities.mission.mission_actions.*
import fr.gouv.cnsp.monitorfish.domain.entities.mission.mission_actions.Completion
import java.time.ZonedDateTime

data class MissionActionDataOutput(
    val id: Int? = null,
    val vesselId: Int? = null,
    val vesselName: String? = null,
    val internalReferenceNumber: String? = null,
    val externalReferenceNumber: String? = null,
    val ircs: String? = null,
    val flagState: CountryCode,
    val districtCode: String? = null,
    val faoAreas: List<String> = listOf(),
    val flightGoals: List<FlightGoal> = listOf(),
    val missionId: Int,
    val actionType: MissionActionType,
    val actionDatetimeUtc: ZonedDateTime,
    val actionEndDatetimeUtc: ZonedDateTime? = null,
    val emitsVms: ControlCheck? = null,
    val emitsAis: ControlCheck? = null,
    val logbookMatchesActivity: ControlCheck? = null,
    val licencesMatchActivity: ControlCheck? = null,
    val speciesWeightControlled: Boolean? = null,
    val speciesSizeControlled: Boolean? = null,
    val separateStowageOfPreservedSpecies: ControlCheck? = null,
    val logbookInfractions: List<LogbookInfraction> = listOf(),
    val licencesAndLogbookObservations: String? = null,
    val gearInfractions: List<GearInfraction> = listOf(),
    val speciesInfractions: List<SpeciesInfraction> = listOf(),
    val speciesObservations: String? = null,
    val seizureAndDiversion: Boolean? = null,
    val otherInfractions: List<OtherInfraction> = listOf(),
    val numberOfVesselsFlownOver: Int? = null,
    val unitWithoutOmegaGauge: Boolean? = null,
    val controlQualityComments: String? = null,
    val feedbackSheetRequired: Boolean? = null,
    val segments: List<FleetSegment> = listOf(),
    val facade: String? = null,
    val longitude: Double? = null,
    val latitude: Double? = null,
    val portLocode: String? = null,
    val portName: String? = null,
    val seizureAndDiversionComments: String? = null,
    val otherComments: String? = null,
    val gearOnboard: List<GearControl> = listOf(),
    val speciesOnboard: List<SpeciesControl> = listOf(),
    val legacyControlUnits: List<LegacyControlUnit> = listOf(),
    val userTrigram: String,
    val vesselTargeted: ControlCheck? = null,
    val hasSomeGearsSeized: Boolean,
    val hasSomeSpeciesSeized: Boolean,
    val speciesQuantitySeized: Int? = null,
    val completedBy: String? = null,
    val completion: Completion,
    val isFromPoseidon: Boolean,
    val isAdministrativeControl: Boolean? = null,
    val isComplianceWithWaterRegulationsControl: Boolean? = null,
    val isSafetyEquipmentAndStandardsComplianceControl: Boolean? = null,
    val isSeafarersControl: Boolean? = null,
    val observationsByUnit: String? = null,
) {
    companion object {
        fun fromMissionAction(missionAction: MissionAction) =
            MissionActionDataOutput(
                id = missionAction.id,
                vesselId = missionAction.vesselId,
                vesselName = missionAction.vesselName,
                internalReferenceNumber = missionAction.internalReferenceNumber,
                externalReferenceNumber = missionAction.externalReferenceNumber,
                ircs = missionAction.ircs,
                flagState = missionAction.flagState,
                districtCode = missionAction.districtCode,
                faoAreas = missionAction.faoAreas,
                flightGoals = missionAction.flightGoals,
                missionId = missionAction.missionId,
                actionType = missionAction.actionType,
                actionDatetimeUtc = missionAction.actionDatetimeUtc,
                actionEndDatetimeUtc = missionAction.actionEndDatetimeUtc,
                emitsVms = missionAction.emitsVms,
                emitsAis = missionAction.emitsAis,
                logbookMatchesActivity = missionAction.logbookMatchesActivity,
                licencesMatchActivity = missionAction.licencesMatchActivity,
                speciesWeightControlled = missionAction.speciesWeightControlled,
                speciesSizeControlled = missionAction.speciesSizeControlled,
                separateStowageOfPreservedSpecies = missionAction.separateStowageOfPreservedSpecies,
                logbookInfractions = missionAction.logbookInfractions,
                licencesAndLogbookObservations = missionAction.licencesAndLogbookObservations,
                gearInfractions = missionAction.gearInfractions,
                speciesInfractions = missionAction.speciesInfractions,
                speciesObservations = missionAction.speciesObservations,
                seizureAndDiversion = missionAction.seizureAndDiversion,
                otherInfractions = missionAction.otherInfractions,
                numberOfVesselsFlownOver = missionAction.numberOfVesselsFlownOver,
                unitWithoutOmegaGauge = missionAction.unitWithoutOmegaGauge,
                controlQualityComments = missionAction.controlQualityComments,
                feedbackSheetRequired = missionAction.feedbackSheetRequired,
                segments = missionAction.segments,
                facade = missionAction.facade,
                longitude = missionAction.longitude,
                latitude = missionAction.latitude,
                portLocode = missionAction.portLocode,
                portName = missionAction.portName,
                seizureAndDiversionComments = missionAction.seizureAndDiversionComments,
                otherComments = missionAction.otherComments,
                gearOnboard = missionAction.gearOnboard,
                speciesOnboard = missionAction.speciesOnboard,
                legacyControlUnits = missionAction.legacyControlUnits,
                userTrigram = missionAction.userTrigram,
                vesselTargeted = missionAction.vesselTargeted,
                hasSomeGearsSeized = missionAction.hasSomeGearsSeized,
                hasSomeSpeciesSeized = missionAction.hasSomeSpeciesSeized,
                speciesQuantitySeized = missionAction.speciesQuantitySeized,
                completedBy = missionAction.completedBy,
                completion = missionAction.completion,
                isFromPoseidon = missionAction.isFromPoseidon,
                isAdministrativeControl = missionAction.isAdministrativeControl,
                isComplianceWithWaterRegulationsControl = missionAction.isComplianceWithWaterRegulationsControl,
                isSafetyEquipmentAndStandardsComplianceControl = missionAction.isSafetyEquipmentAndStandardsComplianceControl,
                isSeafarersControl = missionAction.isSeafarersControl,
                observationsByUnit = missionAction.observationsByUnit,
            )
    }
}
