# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Vincent Chéry
# This file is distributed under the same license as the Monitorfish package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Monitorfish\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-24 17:06+0200\n"
"PO-Revision-Date: 2021-08-23 14:48+0000\n"
"Language-Team: French (https://www.transifex.com/ministere-de-la-transition-ecologique-et-solidaire-1/teams/124045/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:2
#: 0ea0469ea70d4e27904d03ba30532ca8
msgid ":py:mod:`datascience.src.pipeline.processing`"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:8
#: 67bbd88b83de489c98254295bb6ddda0
msgid "Module Contents"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:12
#: afc84e36a24f411786134821e1f6aeeb
msgid "Functions"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: d85bcdb82c13485fb2885ecf3296432e
msgid ""
":obj:`is_a_value <datascience.src.pipeline.processing.is_a_value>`\\ \\(x\\)"
" → bool"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:36
#: fbd95a2a938d4740bf1c4319947c9900 a8c51785f3224cca9c3535858f65f68f
msgid "Returns False if pd.isna(x), True otherwise."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 8711180dab13478f844a41c21f16a945
msgid ""
":obj:`concatenate_values "
"<datascience.src.pipeline.processing.concatenate_values>`\\ \\(row\\: "
"pandas.Series\\) → List"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 308ac9a16c784d0299bd30da7eab7829
msgid "Filters the input pandas Series to keep only distinct non null values"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: c999bc7fbd314bc1a71a7fc3ddc6a28a
msgid ""
":obj:`concatenate_columns "
"<datascience.src.pipeline.processing.concatenate_columns>`\\ \\(df\\: "
"pandas.DataFrame\\, input\\_col\\_names\\: List\\) → pandas.Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 5fd2604085744c248e4b4ef2e235a46a
msgid ""
"For each row in the input DataFrame, the distinct and non null values "
"contained in"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: c59f6cd079a745e0a81c3dd36829789f
msgid ""
":obj:`combine_overlapping_columns "
"<datascience.src.pipeline.processing.combine_overlapping_columns>`\\ "
"\\(df\\: pandas.DataFrame\\, ordered\\_cols\\_list\\: List\\) → "
"pandas.Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 5936244d2da4411dbd51d1aaf365f4c4
msgid ""
"Combines several columns into one by taking the first_valid_value in each "
"row,"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 73e640181d594b8e8116e31cd356a075
msgid ""
":obj:`get_first_non_null_column_name "
"<datascience.src.pipeline.processing.get_first_non_null_column_name>`\\ "
"\\(df\\: pandas.DataFrame\\, result\\_labels\\: Union\\[None\\, dict\\] \\= "
"None\\) → pandas.Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 5f296ba4c0804730b43f8d1a3b40bc99
msgid ""
"Returns a Series with the same index as the input DataFrame, whose values "
"are"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 4d16d6de859541b3900d3ec29aca25ef
msgid ""
":obj:`df_to_dict_series "
"<datascience.src.pipeline.processing.df_to_dict_series>`\\ \\(df\\: "
"pandas.DataFrame\\, result\\_colname\\: str \\= \\'json\\_col\\'\\)"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 424965c1cc51467eb4a725737b820f8e
msgid ""
"Converts a pandas DataFrame into a Series with the same index as the input"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 90b943d15f36401dadc722d73903b670
msgid ""
":obj:`zeros_ones_to_bools "
"<datascience.src.pipeline.processing.zeros_ones_to_bools>`\\ \\(df\\: "
"pandas.DataFrame\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 64701ffb76374fc0a0df05b5460ef516
msgid "Converts a pandas DataFrame containing \"0\", \"1\" and None values"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: d004b244f4a54e12b904f4832b9e7a65
msgid ""
":obj:`to_pgarr <datascience.src.pipeline.processing.to_pgarr>`\\ \\(x\\: "
"Union\\[list\\, set\\, numpy.ndarray\\]\\, handle\\_errors\\: bool \\= "
"False\\, value\\_on\\_error\\: Union\\[str\\, None\\] \\= None\\) → "
"Union\\[str\\, None\\]"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 8e1b0d6799b74ef0b940480809fca214
msgid ""
"Converts a python `list`, `set` or `numpy.ndarray` to a string with "
"Postgresql"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 7f5f3feb11884bfd9bd16069d5e95ad2
msgid ""
":obj:`df_values_to_psql_arrays "
"<datascience.src.pipeline.processing.df_values_to_psql_arrays>`\\ \\(df\\: "
"pandas.DataFrame\\, handle\\_errors\\: bool \\= False\\, "
"value\\_on\\_error\\: Union\\[str\\, None\\] \\= None\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 0ec7ed87f04e435abf75aa7ce0532304
msgid "Returns a `pandas.DataFrame` with all values serialized as strings"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 9a706adebc0b47f88bfce42a71271ab4
msgid ""
":obj:`json_converter <datascience.src.pipeline.processing.json_converter>`\\"
" \\(x\\)"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:210
#: cafb21a703014f29bd9021a75dad063e f16849e9cee54f6ca2faa1e6ef89c557
msgid "Converter for types not natively handled by json.dumps"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 49f74452580246efb7203ec1a77c4a0c
msgid ""
":obj:`to_json <datascience.src.pipeline.processing.to_json>`\\ \\(x\\: "
"Any\\) → str"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:215
#: f10a9ad7b8e549449da8da360822f06f c809901bb74b42f8a34aca58b690b25a
msgid "Converts python object to json string."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 845d3a6961e040a6b8650ea061e8c67e
msgid ""
":obj:`df_values_to_json "
"<datascience.src.pipeline.processing.df_values_to_json>`\\ \\(df\\: "
"pandas.DataFrame\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:220
#: dfa5870303784e0380a04a7a7c2fd5ff ff747536178243b5ba0761ef9b346ac7
msgid ""
"Returns a `pandas.DataFrame` with all values serialized to json string."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 4055c69d01d142e0b76ec052cf32060a
msgid ""
":obj:`drop_rows_already_in_table "
"<datascience.src.pipeline.processing.drop_rows_already_in_table>`\\ \\(df\\:"
" pandas.DataFrame\\, df\\_column\\_name\\: str\\, table\\: "
"sqlalchemy.Table\\, table\\_column\\_name\\: str\\, connection\\: "
"sqlalchemy.engine.base.Connection\\, logger\\: logging.Logger\\) → "
"pandas.DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: cdc349d345b84b55b2abcc14bb3b069d
msgid ""
"Removes rows from the input DataFrame `df` in which the column "
"`df_column_name`"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 75d795ce9f71463e9795851331106c52
msgid ""
":obj:`prepare_df_for_loading "
"<datascience.src.pipeline.processing.prepare_df_for_loading>`\\ \\(df\\: "
"pandas.DataFrame\\, logger\\: logging.Logger\\, pg\\_array\\_columns\\: "
"Union\\[None\\, list\\] \\= None\\, handle\\_array\\_conversion\\_errors\\: "
"bool \\= True\\, value\\_on\\_array\\_conversion\\_error\\=\\'\\{\\}\\'\\, "
"jsonb\\_columns\\: Union\\[None\\, list\\] \\= None\\)"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 67ed3a1476a548f09c64a648e0fb820b
msgid ""
":obj:`join_on_multiple_keys "
"<datascience.src.pipeline.processing.join_on_multiple_keys>`\\ \\(left\\: "
"pandas.DataFrame\\, right\\: pandas.DataFrame\\, on\\: list\\, how\\: str "
"\\= \\'inner\\'\\)"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: cc321fc82e2d4c6ebf8fab969eb92c1d
msgid ""
"Join two pandas DataFrames, attempting to match rows on several keys by"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:38
#: 55d3e5f50f6243a198911ca99b568c49
msgid ""
"NB : The same result could be obtained simply by checking pd.isna(x), but "
"checking if x is None before checking pd.isna(x) improves performance on "
"DataFrames containing many None values, since checking pd.isna(x) is slower "
"than checking if x is None."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: 7e4d0dd32d1c4a3eba696eb8a22c2c6f a8018bf6752340eab9a78278a70644cb
#: ff2d2df0fa2d42ff9fcd34da53d683b5 bdd3df452f2945579db966eda58873bb
#: 21488bbc5b084893b9f05e9bfe64e9af ef6fc35179bb40ad9232b77801d6b6f7
#: d719cf6c62e541308b092593212c1cdb 32e35be53e63438eb8f8bad32ffc5d63
#: 90c0f716db604534b9bd0e84f3619dc0 850e9f2850e54cc7bccdf2df03384567
msgid "Parameters"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:43
#: c7dd4318234f45448d40ad2a72d5d225
msgid "Anything"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: 30bd03df2ff34540a571b9fe19dd34c2 1f6e8ee6715240d5b25597617c5e5f8d
#: e94a9822c6a94e74b2c84124c3c73a7a 43c727fe523d4d958fa66e228a5d435a
#: 8a1b8500458340f192960b87c1679d8b 1b8a0729235841e9b5d3c1967137b903
#: 43803b3ba76d4ec9b6c5378dab2b9929 f2afe2f286d14f1cb25f8f55b94f6259
#: 3b7c01288f814376aee7d1990b9e5db4 9c14b1f1026b4a7c84cced7cd76af4bd
msgid "Returns"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:45
#: 1ea398173a444103978a0aa61f1b6f80
msgid "False if pd.isna(x), True otherwise"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: 93e53dd9f0b045388a4838a34c0e4bfe 1811eb70b77e400ca32cff75012975b7
#: 50bf0db4790d4c35a5df511c6e15bfa0 9aba4b2976ab4007bbeef3c96d489a89
#: b408585db2924f9b89263c3a677b333f cf2b6e0d14c94fd5a097c1701781fac9
#: 7ca2352516a442c9a8d22e73ba12ca12 5f9c8d9a1d0a4abb85401375b0089542
#: 9587cc00c7a643d59fa069ebf86aa339 daa5c940f62a476281b758d929a58b19
msgid "Return type"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:51
#: 82c154a2e6c743b7a706f226661ac225
msgid ""
"Filters the input pandas Series to keep only distinct non null values and "
"returns the result as a python list."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:54
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:126
#: ac51ba98ad0c4ab490d24df83478c8ed 7be0d60cec3842678b45b1da069206c6
msgid "pandas Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:57
#: 27c32c83e12c4446a42d558f76d0d83b
msgid "list of distinct non null values in row"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:63
#: 9867420ab3a9402f8d5067f51b261055
msgid ""
"For each row in the input DataFrame, the distinct and non null values "
"contained in the columns input_col_names are stored in a list. A pandas "
"Series of the same length as the input DataFrame is then constructed with "
"these lists as values."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:67
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:121
#: 5349e123c47c4cc6a972ff4968915174 8022064cc8484557a4bdcaec62b78e1d
msgid "input DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:69
#: 3c058cdf03f647ff83729719d27040d7
msgid "the names of the columns to use"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:72
#: 4a4350b2e2b54f8d8c53289f5d436750
msgid "resulting Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:78
#: 902ce1f5f7b14dfd9e44bc0220a4d0a4
msgid ""
"Combines several columns into one by taking the first_valid_value in each "
"row, in the order of the ordered_cols_list."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:81
#: 58d0171e0cfe4f62b040edbdd75020fa
msgid "Returns a pandas Series with the combined results."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:83
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:103
#: c5b94b7689994c8c9ad9614972b3e986 85b9e8a4f282444ea464255a3f4399cd
msgid "input pandas DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:85
#: 202f6435300941cdbd9e1621880e8768
msgid "list of column names"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:88
#: 8996bfcbfb754fcaa4eab0fe06babd66
msgid ""
"Series containing the first valid value in each row of the DataFrame,     "
"taken in the ordered_cols_list columns."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:90
#: 41c59154e89c4dcfa534191926970d96
msgid "Series containing the first valid value in each row of the DataFrame,"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:91
#: 192d0f4eb57749009180ad00d2b0d3b8
msgid "taken in the ordered_cols_list columns."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:97
#: 4622ecf75c224234811ebb0015d7f9ce
msgid ""
"Returns a Series with the same index as the input DataFrame, whose values "
"are the name of the first column (or the corresponding label, if provided) "
"with a non-null value in each row, from left to right."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:101
#: 017b4dcd9ec74e64956316097493232c
msgid "Rows with all null values return None."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:105
#: e38e9f84751a4d9cb5a958a4c9a7f3ec
msgid "if provided, must be a mapping of column names to the"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:109
#: 544ff9f7d85e4f81b75fece4cb25ea0b
msgid ""
"Series containing the name of the first column with a non-null value in each"
" row of the DataFrame, from left to right"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:116
#: 98a5e465a7bd4706b32de7f320aa8ab2
msgid ""
"Converts a pandas DataFrame into a Series with the same index as the input "
"DataFrame and whose values are dictionnaries like :"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:119
#: d22ef1ee78394f9fb35807cb0b9973c6
msgid "{'column_1' : value, 'column_2': value}"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:123
#: e96348ae35f3466ab6adb6762b5d06b4
msgid "optionnal, name of result Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:132
#: 71382a98f3f043cd8b44909becf82d2f
msgid ""
"Converts a pandas DataFrame containing \"0\", \"1\" and None values to a "
"DataFrame with False, True and None values respectively."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:135
#: 5ee620471b764fd193099be56961132b
msgid ""
"Useful to convert boolean data extracted from Oracle databases, since Oracle"
" does not have a boolean data type and boolean data is often stored as "
"\"0\"s and \"1\"s."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:141
#: 545d6eb108704dc18a4b8921491865f5
msgid ""
"Converts a python `list`, `set` or `numpy.ndarray` to a string with "
"Postgresql array syntax."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:144
#: 0f6747636ecc46c596e0694006ea6f2a
msgid ""
"Elements of the list-like input argument are converted to `string` type, "
"then stripped of leading and trailing blank spaces, and finally filtered to "
"keep only non empty strings."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:148
#: f78f16c1a9c94bd5915255b5de5e3b01
msgid ""
"This transformation is required on the elements of a DataFrame's columns "
"that contain collections before bulk inserting the DataFrame into Postgresql"
" with the psql_insert_copy method."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:152
#: b058566ecf5c43d5a641891c7541ccb5
msgid "iterable to serialize as Postgres array"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:154
#: a8a6e52f0d08487e84186c83298f6b83
msgid ""
"if ``True``, returns ``value_on_error`` instead of raising ``ValueError`` "
"when the input is of an unexpected type"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:157
#: 5df951cf9f584e8397c0cd75771f6b16
msgid "value to return on errors, if ``handle_errors`` is ``True``"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:161
#: e678620d767d4a26a1b671e5ef483d5e
msgid "string with Postgresql Array compatible syntax"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: e86d861309204cb69bbae0515d231661
msgid "Raises"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:164
#: 6f7efa0307ae4995acd3dba5c4964e28
msgid "when ``handle_errors`` is False and ``x`` is not list-like."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:167
#: 870e55ece9d54c28b6780864c8e3d693
msgid "Examples"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:181
#: 0ee90f635c324869b7bfb08320c42a2b
msgid ""
"Returns a `pandas.DataFrame` with all values serialized as strings with "
"Postgresql array syntax. All values must be of type list, set or numpy "
"array. Other values raise errors, which may be handled if handle_errors is "
"set to True."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:185
#: 425fcaf36b66494e9b861a6f588bfaa6
msgid "See `to_pgarr` for details on error handling."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:187
#: 554a5e9473e1489ab35da5c3a658ade7
msgid ""
"This is required before bulk loading a pandas.DataFrame into a Postgresql "
"table with the psql_insert_copy method."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:191
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:227
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:264
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:266
#: cb29ae5b6e7d489f8e431f99435f66b6 ac2f804d9ce145f5b428da00fe137272
#: 675984905e27457ba4ccecff70500e93 16393f307c984d38a9a52b86094290a3
msgid "pandas DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:194
#: 150224a8101842d9a98167514a56a313
msgid ""
"pandas DataFrame with the same shape and index, all values     serialized as"
" strings with Postgresql array syntax."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:196
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:232
#: 01d0f2eeeca1431db6007367ff0c8543 7ee0ef0bfde0453cb810ced2c99f2931
msgid "pandas DataFrame with the same shape and index, all values"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:197
#: 67a39b26a6a34ccfa9b9fb04f43bbb25
msgid "serialized as strings with Postgresql array syntax."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:200
#: df60889a03ad4233a9cbcf577c027a6c
msgid "Examples :"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:222
#: 33c547500ccf4b8ca685448d675ee021
msgid ""
"This is required before bulk loading into a Postgresql table with the "
"psql_insert_copy method."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:225
#: 08ebe4375242472383725cdd51dadb61
msgid "See `to_json` function for details."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:230
#: f563cd4dcb9b4fc192945fa94314bf28
msgid ""
"pandas DataFrame with the same shape and index, all values     serialized as"
" json strings."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:233
#: e29c54f123884097bc1d0b59cbda8991
msgid "serialized as json strings."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:239
#: 1610e1b36daa463987ecd213074cd220
msgid ""
"Removes rows from the input DataFrame `df` in which the column "
"`df_column_name` contains values that are already present in the column "
"`table_column_name` of the table `table`, and returns the filtered "
"DataFrame."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:249
#: 6d1f2e1aa7084dcdbb213ced075a203d
msgid ""
"Join two pandas DataFrames, attempting to match rows on several keys by "
"decreasing order of priority."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:252
#: 562d2ee92c3d4008b0cfcc130564c7d4
msgid ""
"Joins are performed successively with each of the keys listed in `on`, and "
"results are then concatenated to form the final result. This is different "
"from joining on a composite key where all keys must match simultaneously : "
"here, rows of left and right DataFrames are joined if at least one of the "
"keys match."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:257
#: e844c8108ae74670a48502c6aa8bc6ac
msgid ""
"Joins are performed on the keys listed in `on` by \"decreasing order or "
"priority\" in the sense that rows of left and right that have been matched "
"on one key are removed from ulterior joins perfomed on the next keys."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:261
#: cb95dc5690e746498098218ffbb417d3
msgid ""
"During each of the joins on the individual keys, non-joining key pairs from "
"left and right DataFrames are coalesced."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:268
#: 6dd5d92e90864d0db84fffa4b78d7f9a
msgid "list of column names to use as join keys"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:270
#: 96bb5888213b40d8b930a6e2bfbe4776
msgid "'inner', 'left', 'right' or 'outer'. Defaults to 'inner'."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:273
#: f4936d822d044a8c8bdc787786d75f91
msgid "result of join operation"
msgstr ""
