# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Vincent Chéry
# This file is distributed under the same license as the Monitorfish package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Monitorfish \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-24 17:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:2
#: 79e0fcae8612411e9340b9eec32a6969
msgid ":py:mod:`datascience.src.pipeline.processing`"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:8
#: 26bf5af6d19640d596593da4e34e99df
msgid "Module Contents"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:12
#: 747b85867b8947a99b668bed23920f41
msgid "Functions"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 58ee8e8d34784df8be50feb95e984dfa
msgid ":obj:`is_a_value <datascience.src.pipeline.processing.is_a_value>`\\ \\(x\\) → bool"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:36
#: 70bb07ce69d9466cbf025bc8e2bdf242
#: bc111d8b9c1043dc8e1b9c0d351d1f57
msgid "Returns False if pd.isna(x), True otherwise."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: c0e13b1461524fb48b0832c7d253f39e
msgid ":obj:`concatenate_values <datascience.src.pipeline.processing.concatenate_values>`\\ \\(row\\: pandas.Series\\) → List"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 8fcaf8dc2c6742c283c69e5f48c5d985
msgid "Filters the input pandas Series to keep only distinct non null values"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 5a8679f99730432887d16f5a4ca20354
msgid ":obj:`concatenate_columns <datascience.src.pipeline.processing.concatenate_columns>`\\ \\(df\\: pandas.DataFrame\\, input\\_col\\_names\\: List\\) → pandas.Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: cb6a4db61dc14b6a810df773e8625ba2
msgid "For each row in the input DataFrame, the distinct and non null values contained in"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 22a5f5c24fe34c5b97e4ce75cc6f3201
msgid ":obj:`combine_overlapping_columns <datascience.src.pipeline.processing.combine_overlapping_columns>`\\ \\(df\\: pandas.DataFrame\\, ordered\\_cols\\_list\\: List\\) → pandas.Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 3aa929f908aa420a8c95c118736c9c18
msgid "Combines several columns into one by taking the first_valid_value in each row,"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: d7f6a07dfd7a474aad803ade4e372d21
msgid ":obj:`get_first_non_null_column_name <datascience.src.pipeline.processing.get_first_non_null_column_name>`\\ \\(df\\: pandas.DataFrame\\, result\\_labels\\: Union\\[None\\, dict\\] \\= None\\) → pandas.Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 80e9ac40f84144f8bc7973ad39640a18
msgid "Returns a Series with the same index as the input DataFrame, whose values are"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: b51a1ea4a8b54f918976edf3094aee63
msgid ":obj:`df_to_dict_series <datascience.src.pipeline.processing.df_to_dict_series>`\\ \\(df\\: pandas.DataFrame\\, result\\_colname\\: str \\= \\'json\\_col\\'\\)"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 76024ae3e6cf479aa3523e3703c4c6c6
msgid "Converts a pandas DataFrame into a Series with the same index as the input"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: b66a922931b44c4f805fd726135fdc47
msgid ":obj:`zeros_ones_to_bools <datascience.src.pipeline.processing.zeros_ones_to_bools>`\\ \\(df\\: pandas.DataFrame\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 3340c1c14f134f58b44299eafa478055
msgid "Converts a pandas DataFrame containing \"0\", \"1\" and None values"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: ecddc5e47f9544cb9dabc129b784d173
msgid ":obj:`to_pgarr <datascience.src.pipeline.processing.to_pgarr>`\\ \\(x\\: Union\\[list\\, set\\, numpy.ndarray\\]\\, handle\\_errors\\: bool \\= False\\, value\\_on\\_error\\: Union\\[str\\, None\\] \\= None\\) → Union\\[str\\, None\\]"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 5954b995969747f8ae55b06b7f47d7d0
msgid "Converts a python `list`, `set` or `numpy.ndarray` to a string with Postgresql"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 36bee429f51040c18999f87e7361a1be
msgid ":obj:`df_values_to_psql_arrays <datascience.src.pipeline.processing.df_values_to_psql_arrays>`\\ \\(df\\: pandas.DataFrame\\, handle\\_errors\\: bool \\= False\\, value\\_on\\_error\\: Union\\[str\\, None\\] \\= None\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 6169530cc527475eadf25e5b714cfc99
msgid "Returns a `pandas.DataFrame` with all values serialized as strings"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 5912eb9125684d1cae732008fa9f2060
msgid ":obj:`json_converter <datascience.src.pipeline.processing.json_converter>`\\ \\(x\\)"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:210
#: 042907740bef4c10832f97fec8ac47a3
#: e34242f94b52497893d1e9160ace5e60
msgid "Converter for types not natively handled by json.dumps"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: d18f8d731c40489cbdcf3101f9cb5c31
msgid ":obj:`to_json <datascience.src.pipeline.processing.to_json>`\\ \\(x\\: Any\\) → str"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:215
#: 787db17e9afa4ef791b720b90f67a4b4
#: 2ec8c7858fb24244acaa64264a7671ec
msgid "Converts python object to json string."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 1529dbf8b2884791bab47d55e18b0518
msgid ":obj:`df_values_to_json <datascience.src.pipeline.processing.df_values_to_json>`\\ \\(df\\: pandas.DataFrame\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:220
#: 32f5f9d17fab4037b2875c635af94b4e
#: 07706b7e22a042ccb83178fba29349df
msgid "Returns a `pandas.DataFrame` with all values serialized to json string."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 74e59099ef58493aba5fda142cd39ded
msgid ":obj:`drop_rows_already_in_table <datascience.src.pipeline.processing.drop_rows_already_in_table>`\\ \\(df\\: pandas.DataFrame\\, df\\_column\\_name\\: str\\, table\\: sqlalchemy.Table\\, table\\_column\\_name\\: str\\, connection\\: sqlalchemy.engine.base.Connection\\, logger\\: logging.Logger\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 11917f70371c471bb8324bbdd9d2cb61
msgid "Removes rows from the input DataFrame `df` in which the column `df_column_name`"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: d260cdcf89e64a75aa6a7c91308ec650
msgid ":obj:`prepare_df_for_loading <datascience.src.pipeline.processing.prepare_df_for_loading>`\\ \\(df\\: pandas.DataFrame\\, logger\\: logging.Logger\\, pg\\_array\\_columns\\: Union\\[None\\, list\\] \\= None\\, handle\\_array\\_conversion\\_errors\\: bool \\= True\\, value\\_on\\_array\\_conversion\\_error\\=\\'\\{\\}\\'\\, jsonb\\_columns\\: Union\\[None\\, list\\] \\= None\\)"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 496ee8d72572411d96bc9f4264248a9e
msgid ":obj:`join_on_multiple_keys <datascience.src.pipeline.processing.join_on_multiple_keys>`\\ \\(left\\: pandas.DataFrame\\, right\\: pandas.DataFrame\\, on\\: list\\, how\\: str \\= \\'inner\\'\\)"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:33:<autosummary>:1
#: 4a1613e21e3f4811bcf654a9efa0a1a3
msgid "Join two pandas DataFrames, attempting to match rows on several keys by"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:38
#: 9431f0a61ff745bca0284d7a6573b395
msgid "NB : The same result could be obtained simply by checking pd.isna(x), but checking if x is None before checking pd.isna(x) improves performance on DataFrames containing many None values, since checking pd.isna(x) is slower than checking if x is None."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: 861b4153c570495da16ee9c2efb80a35
#: 9a77147067ef4748999a6ab616f68d34
#: 22c7bf749af8474b9c9a8946702d1368
#: ca2bf2df3ebc4358bb04d38377f11657
#: d9f577ef215b45d6b5551a034001718b
#: f10d9c485ba64a3a8f292b654ef78697
#: 9e61f1d928ba473bb5a757b424a4baf0
#: e4eeb70a18bb4967bf8d8c3993b88fac
#: c945b7f6c5b6441e9d9211f5112b11d4
#: 6ea25558649d4bf3b709f7be814bdae1
msgid "Parameters"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:43
#: a179e4909ccb4aa9bd0563b0abd4109b
msgid "Anything"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: 11158c3a1ce444aba06f9b5071e2d308
#: d13fe250d01d4278876f6669151be0f5
#: da19777bb4e44524a1e2d8c30ac350d6
#: 73b94dc479684af3a84843997c11be4d
#: 5f636c29ee0648db8d5e23d895d8f590
#: b88b691dc74f494786223d1fe38d5b76
#: 517498d805d047139dff73c6a6e770b7
#: 7add26ff3630437194829c6ba6bb454c
#: a52a49e9ab9542b482726cc23a372bf4
#: 922da394ec3d46aab51c399235cda2f6
msgid "Returns"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:45
#: 1bb8ef3607584ece834b2ee9ddc87a92
msgid "False if pd.isna(x), True otherwise"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: 275b86a3bb00472aa88d8a410cbfa2f4
#: fc5b50956328477497db40e36b47ff9d
#: 4e4e5fed2ef64a2fb18adfe4eb804c8a
#: 28c02a7c312549049162c87aa9e49cab
#: 5832704e54ab48c9816a24d8824e0311
#: 37241727289841339e0ece9ab664d0e7
#: f31f409dbd4f493697594c11fe208d85
#: 17df75b80af840a796b81d254c26020d
#: 9b7186dad1ef49c48c967d0ecad18e87
#: d1baac31e75244038a91ee2860f9ecc6
msgid "Return type"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:51
#: 6650ed5a91ab4c5eaec10a20d34f73b9
msgid "Filters the input pandas Series to keep only distinct non null values and returns the result as a python list."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:54
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:126
#: d8f658ce7d6749aeb5bdf718712a2e92
#: 284d687a0e8d4129bc6192e9fc2762b7
msgid "pandas Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:57
#: dec84fd43ce644b384c3ae912109c9db
msgid "list of distinct non null values in row"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:63
#: 4779c37ad9634b5691baf712cc959f26
msgid "For each row in the input DataFrame, the distinct and non null values contained in the columns input_col_names are stored in a list. A pandas Series of the same length as the input DataFrame is then constructed with these lists as values."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:67
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:121
#: 18292367d81a4f5a864b8d4bcf8288c8
#: 0846a6f2c5204e5cb27643177a7af56e
msgid "input DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:69
#: 7d9b4ae063714104a392e1b8adafde89
msgid "the names of the columns to use"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:72
#: 23cd2ef1fc4648c9a444b589f3b3ff18
msgid "resulting Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:78
#: aebf0d559a1040689269866132613e9b
msgid "Combines several columns into one by taking the first_valid_value in each row, in the order of the ordered_cols_list."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:81
#: 2af658d428904519957bc8c74ddc2278
msgid "Returns a pandas Series with the combined results."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:83
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:103
#: d10da1238a854affb9504e614fb05730
#: 8314e8cedce54dff87a0dd48f7850e04
msgid "input pandas DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:85
#: eb21363754334891bfa84f18adec8896
msgid "list of column names"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:88
#: 73976d5b97e843ecbe1315f160b03752
msgid "Series containing the first valid value in each row of the DataFrame,     taken in the ordered_cols_list columns."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:90
#: a212e84dd0cb48dfbab323a9a71d97b0
msgid "Series containing the first valid value in each row of the DataFrame,"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:91
#: e118948c45f940e2a230cb181a676f3b
msgid "taken in the ordered_cols_list columns."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:97
#: cdec67b6c44f440e877946f7302418ee
msgid "Returns a Series with the same index as the input DataFrame, whose values are the name of the first column (or the corresponding label, if provided) with a non-null value in each row, from left to right."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:101
#: 8edf59bea2cd4033a535c2757db9e8e2
msgid "Rows with all null values return None."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:105
#: 82b566f2045f400b8bc71f032ba4fad1
msgid "if provided, must be a mapping of column names to the"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:109
#: 02cc1fddd5da471185044f197c05aded
msgid "Series containing the name of the first column with a non-null value in each row of the DataFrame, from left to right"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:116
#: bf224eb4712640048ff8f687ef3f54b3
msgid "Converts a pandas DataFrame into a Series with the same index as the input DataFrame and whose values are dictionnaries like :"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:119
#: abac1a5afb9449809bde1b5518ba5fb4
msgid "{'column_1' : value, 'column_2': value}"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:123
#: da9d3090d99642a4abab0ead97c0a597
msgid "optionnal, name of result Series"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:132
#: c817bfeadc634d58a2112b449e81b83e
msgid "Converts a pandas DataFrame containing \"0\", \"1\" and None values to a DataFrame with False, True and None values respectively."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:135
#: 0d2c9cefb9f1482594143a36ab7390c3
msgid "Useful to convert boolean data extracted from Oracle databases, since Oracle does not have a boolean data type and boolean data is often stored as \"0\"s and \"1\"s."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:141
#: 778f50b8b366436eb17f940fa427af34
msgid "Converts a python `list`, `set` or `numpy.ndarray` to a string with Postgresql array syntax."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:144
#: ffdfd2c60b274086a801d555f21b2a6f
msgid "Elements of the list-like input argument are converted to `string` type, then stripped of leading and trailing blank spaces, and finally filtered to keep only non empty strings."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:148
#: 1d5fd21938084448b6f71a97e5e15a73
msgid "This transformation is required on the elements of a DataFrame's columns that contain collections before bulk inserting the DataFrame into Postgresql with the psql_insert_copy method."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:152
#: 056466de58c6440d8536842ebbcb44b7
msgid "iterable to serialize as Postgres array"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:154
#: b93754cd117241afa016a694ab14e693
msgid "if ``True``, returns ``value_on_error`` instead of raising ``ValueError`` when the input is of an unexpected type"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:157
#: 4c16490fd7fa420089c124da8123bd38
msgid "value to return on errors, if ``handle_errors`` is ``True``"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:161
#: def32c34f5cb47d0b6b43cff6fcf2086
msgid "string with Postgresql Array compatible syntax"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:0
#: 827cd18cc3db4244ba77d19c8eda76c4
msgid "Raises"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:164
#: 43468022c69f43a4b74b9e5b8a7ccc7c
msgid "when ``handle_errors`` is False and ``x`` is not list-like."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:167
#: ec60f58912cd489a85e8c623df9fd06f
msgid "Examples"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:181
#: 7a3c1c3a6a3c4708a20905b505e8de9e
msgid "Returns a `pandas.DataFrame` with all values serialized as strings with Postgresql array syntax. All values must be of type list, set or numpy array. Other values raise errors, which may be handled if handle_errors is set to True."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:185
#: 80a86104cccf45a0a3917d97a0d4dfa8
msgid "See `to_pgarr` for details on error handling."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:187
#: 546ebdcaaa984df8a8c07f4becf61235
msgid "This is required before bulk loading a pandas.DataFrame into a Postgresql table with the psql_insert_copy method."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:191
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:227
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:264
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:266
#: 22b3c45d15f244cba1d5be06e9afe79d
#: 400afc5011fe42c39e3ccfe612a624c2
#: cd28c99a33a14254b88b5ce058b0862d
#: 4d45442f1f9c450687b783b91fd840c2
msgid "pandas DataFrame"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:194
#: 45143f4ea9304764b4bd4176ead8c32d
msgid "pandas DataFrame with the same shape and index, all values     serialized as strings with Postgresql array syntax."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:196
#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:232
#: 90a276f922d342139c9d404a8ac70268
#: 447c9ef640444d738ad19185495e2c73
msgid "pandas DataFrame with the same shape and index, all values"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:197
#: 237494a3ee964a889c60d5d489b78417
msgid "serialized as strings with Postgresql array syntax."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:200
#: 75a8466f465d49e89592551a23a62ddc
msgid "Examples :"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:222
#: 73a706b0343a4abaa367e0ae1c46090a
msgid "This is required before bulk loading into a Postgresql table with the psql_insert_copy method."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:225
#: 90060071093b49ceb1fe73bc394cb40b
msgid "See `to_json` function for details."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:230
#: 4afc6fd97fe74bf89fc7142e5431792b
msgid "pandas DataFrame with the same shape and index, all values     serialized as json strings."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:233
#: c0a181ff1d694a00a8564b8623370b0d
msgid "serialized as json strings."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:239
#: 0dbe403c364143dd917f220fb296f13f
msgid "Removes rows from the input DataFrame `df` in which the column `df_column_name` contains values that are already present in the column `table_column_name` of the table `table`, and returns the filtered DataFrame."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:249
#: 9671cea0337a43dd9ec8a418207fef2d
msgid "Join two pandas DataFrames, attempting to match rows on several keys by decreasing order of priority."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:252
#: f81d73497def4ccf81dc22085cc1b0f0
msgid "Joins are performed successively with each of the keys listed in `on`, and results are then concatenated to form the final result. This is different from joining on a composite key where all keys must match simultaneously : here, rows of left and right DataFrames are joined if at least one of the keys match."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:257
#: f3e7807c02784bec8a789854be2c3252
msgid "Joins are performed on the keys listed in `on` by \"decreasing order or priority\" in the sense that rows of left and right that have been matched on one key are removed from ulterior joins perfomed on the next keys."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:261
#: 59817dda36a344f3bfe79acef7b70570
msgid "During each of the joins on the individual keys, non-joining key pairs from left and right DataFrames are coalesced."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:268
#: 8b2fdb2a434f472da92c727fc3fcc0fa
msgid "list of column names to use as join keys"
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:270
#: 71809ffb200e4f3fad138a3530152824
msgid "'inner', 'left', 'right' or 'outer'. Defaults to 'inner'."
msgstr ""

#: ../source/autoapi/datascience/src/pipeline/processing/index.rst:273
#: 809b4577ac214222b72842becfd6daad
msgid "result of join operation"
msgstr ""
