:py:mod:`datascience.src.pipeline.flows.ers`
============================================

.. py:module:: datascience.src.pipeline.flows.ers


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   datascience.src.pipeline.flows.ers.get_message_type
   datascience.src.pipeline.flows.ers.extract_zipfiles
   datascience.src.pipeline.flows.ers.extract_xmls_from_zipfile
   datascience.src.pipeline.flows.ers.parse_xmls
   datascience.src.pipeline.flows.ers.clean
   datascience.src.pipeline.flows.ers.load_ers



Attributes
~~~~~~~~~~

.. autoapisummary::

   datascience.src.pipeline.flows.ers.RECEIVED_DIRECTORY
   datascience.src.pipeline.flows.ers.TREATED_DIRECTORY
   datascience.src.pipeline.flows.ers.NON_TREATED_DIRECTORY
   datascience.src.pipeline.flows.ers.ERROR_DIRECTORY
   datascience.src.pipeline.flows.ers.zipfiles


.. py:data:: RECEIVED_DIRECTORY
   

   

.. py:data:: TREATED_DIRECTORY
   

   

.. py:data:: NON_TREATED_DIRECTORY
   

   

.. py:data:: ERROR_DIRECTORY
   

   

.. py:function:: get_message_type(zipfile_name: str) -> str

   For a zipfile name like UN_JBE202001123614.zip or ERS3_ACK_JBE202102365445.zip,
   extract the message type, which may be one of :

   - ERS3 (a set of messages in ERS3 format)
   - ERS3_ACK (a set of acknowledgement statuses from BIA for ERS3 messages)
   - UN (a set of FLUX messages)


.. py:function:: extract_zipfiles(input_dir: pathlib.Path, treated_dir: pathlib.Path, non_treated_dir: pathlib.Path, error_dir: pathlib.Path) -> List[dict]

   Scans ``input_dir``, in which ers zipfiles are expected to be arranged in a
   hierarchy folders like : year / month / zipfiles. Yields found zipfiles
   along with the corresponding paths of :

   - ``input_directory`` where the zipfile is located
   - ``treated_directory`` where the zipfile will be transfered after integration into
     the monitorfish database
   - ``non_treated_directory`` where the zipfile will be transfered if it is a FLUX type
     of message (currently not handled)
   - ``error_directory`` if an error occurs during the treatment of messages.


.. py:function:: extract_xmls_from_zipfile(zipfile: Union[None, dict]) -> Union[None, dict]


.. py:function:: parse_xmls(zipfile: Union[None, dict]) -> Union[None, dict]


.. py:function:: clean(zipfile: Union[None, dict]) -> Union[None, dict]


.. py:function:: load_ers(cleaned_data: List[dict])

   Loads ERS data into public.ers and public.ers_messages tables.

   :param cleaned_data: list of dictionaries (output of `clean` task)
   :type cleaned_data: list


.. py:data:: zipfiles
   

   

