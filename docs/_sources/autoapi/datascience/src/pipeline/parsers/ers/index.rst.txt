:py:mod:`datascience.src.pipeline.parsers.ers`
==============================================

.. py:module:: datascience.src.pipeline.parsers.ers


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   datascience.src.pipeline.parsers.ers.simple_parser
   datascience.src.pipeline.parsers.ers.parse_ops
   datascience.src.pipeline.parsers.ers.parse_cor
   datascience.src.pipeline.parsers.ers.parse_del
   datascience.src.pipeline.parsers.ers.parse_ret
   datascience.src.pipeline.parsers.ers.parse_ers
   datascience.src.pipeline.parsers.ers.parse_log
   datascience.src.pipeline.parsers.ers.parse_
   datascience.src.pipeline.parsers.ers.parse
   datascience.src.pipeline.parsers.ers.parse_xml_string
   datascience.src.pipeline.parsers.ers.batch_parse



Attributes
~~~~~~~~~~

.. autoapisummary::

   datascience.src.pipeline.parsers.ers.parsers


.. py:exception:: ERSParsingError

   Bases: :py:obj:`Exception`

   Raised when an ERS message cannot be parsed.


.. py:function:: simple_parser(el: xml.etree.ElementTree.Element, pass_child: bool = False)


.. py:function:: parse_ops(ops)


.. py:function:: parse_cor(cor)


.. py:function:: parse_del(del_)


.. py:function:: parse_ret(ret)


.. py:function:: parse_ers(ers)


.. py:function:: parse_log(log)


.. py:data:: parsers
   

   

.. py:function:: parse_(el)


.. py:function:: parse(el)


.. py:function:: parse_xml_string(xml_string)


.. py:function:: batch_parse(ers_xmls: List[str])

   Parses a list of ERS messages and return 2 tables as DataFrames containing the
   information extracted from the messages.

   :param ers_xmls: list of ERS xml messages
   :type ers_xmls: List[str]

   :returns:

             Dataframe with parsed metadata, including a "value" column
                 with json data extracted with the xml message
             pd.DataFrame:  Dataframe with parsed metadata, including a "xml_message" column
                 with the original xml message
   :rtype: pd.DataFrame


