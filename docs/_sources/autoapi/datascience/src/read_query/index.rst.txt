:py:mod:`datascience.src.read_query`
====================================

.. py:module:: datascience.src.read_query


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   datascience.src.read_query.read_saved_query
   datascience.src.read_query.read_query
   datascience.src.read_query.read_table



.. py:function:: read_saved_query(db: str, sql_filepath: Union[str, pathlib.Path], parse_dates: Union[list, dict, None] = None, params=None, **kwargs) -> pandas.DataFrame

   Run saved SQLquery on a database. Supported databases :
   - 'ocan' : OCAN database
   - 'fmc': FMC database
   - 'monitorfish_remote': Monitorfish database
   - 'monitorfish_local': Monitorfish PostGIS database hosted in CNSP
   - 'cacem_local' : CACEM PostGIS database hosted in CNSP

   Database credentials must be present in the environement.

   :param db: Database name. Possible values :
              'ocan', 'fmc', 'monitorfish_remote', 'monitorfish_local'
   :type db: str
   :param sql_filepath: path to .sql file, starting from the saved queries folder.
                        example : "ocan/nav_fr_peche.sql"
   :type sql_filepath: str
   :param parse_dates:
                       - List of column names to parse as dates.
                       - Dict of ``{column_name: format string}`` where format string is
                       strftime compatible in case of parsing string times or is one of
                       (D, s, ns, ms, us) in case of parsing integer timestamps.
                       - Dict of ``{column_name: arg dict}``, where the arg dict corresponds
                       to the keyword arguments of :func:`pandas.to_datetime`
   :type parse_dates: Union[list, dict, None], optional
   :param params: dict of query parameters
   :param kwargs: passed to pd.read_sql

   :returns: Query results
   :rtype: pd.DataFrame


.. py:function:: read_query(db: str, query, chunksize: Union[None, str] = None, params=None, **kwargs) -> pandas.DataFrame

   Run SQLquery on a database. Supported databases :
   - 'ocan' : OCAN database
   - 'fmc': FMC database
   - 'monitorfish_remote': Monitorfish database
   - 'monitorfish_local': Monitorfish PostGIS database hosted in CNSP
   - 'cacem_local' : CACEM PostGIS database hosted in CNSP

   Database credentials must be present in the environement.

   :param db: Database name. Possible values :
              'ocan', 'fmc', 'monitorfish_remote', 'monitorfish_local'
   :type db: str
   :param query: Query string or SQLAlchemy Selectable
   :type query: str
   :param kwargs: passed to pd.read_sql

   :returns: Query results
   :rtype: pd.DataFrame


.. py:function:: read_table(db: str, schema: str, table_name: str)

   Loads database table into pandas Dataframe. Supported databases :
   - 'ocan' : OCAN database
   - 'fmc': FMC database
   - 'monitorfish_remote': Monitorfish database
   - 'monitorfish_local': Monitorfish PostGIS database hosted in CNSP
   - 'cacem_local' : CACEM PostGIS database hosted in CNSP

   :param db: Database name. Possible values :
              'ocan', 'fmc', 'monitorfish_remote', 'monitorfish_local'
   :type db: str
   :param schema: Schema name
   :type schema: str
   :param table_name: Table name
   :type table_name: str

   :returns: Dataframe containing the entire table
   :rtype: pd.DataFrame


