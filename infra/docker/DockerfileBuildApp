#####################
# Multi stage build #
#####################

ARG GITHUB_SHA=NO_COMMIT
ARG VERSION=NO_VERSION

########################################
# Build monitorfish backend with maven #
########################################
FROM gradle:8.4-jdk17 as buildBack

ARG GITHUB_SHA
ARG VERSION

WORKDIR /tmp/

COPY --chown=gradle:gradle backend/ /tmp/
COPY --chown=gradle:gradle backend/build.gradle.kts /tmp/BUILD_GRADLE_WITH_ENV_VARS
RUN chown -R gradle /tmp/*

USER gradle
RUN sed -e "s/COMMIT_TO_CHANGE/$GITHUB_SHA/g" \
  -e "s/VERSION_TO_CHANGE/${VERSION}/g" \
  BUILD_GRADLE_WITH_ENV_VARS > build.gradle.kts

RUN gradle assemble

###########################
# Build frontend with npm #
###########################
FROM node:20-alpine as buildFront

ARG VERSION
ARG ENV_PROFILE
ENV CI=true
ENV ENV_PROFILE=$ENV_PROFILE

RUN echo ${ENV_PROFILE}

COPY frontend/ /tmp/frontend/
COPY infra/ /tmp/infra/
WORKDIR /tmp/frontend

# Files are expected to be in /tmp/frontend/dist/monitorfish-frontend
RUN npm ci
RUN npm run build

######################
# Upload sourcemaps  #
######################
FROM getsentry/sentry-cli:2.19.4 as buildSourcemaps

ARG VERSION
ARG SENTRY_URL
ARG SENTRY_AUTH_TOKEN
ARG SENTRY_ORG
ARG SENTRY_PROJECT

RUN mkdir -p /tmp/frontend/build
COPY --from=buildFront /tmp/frontend/build /tmp/frontend/build

# Upload sourcemaps to sentry
RUN sentry-cli sourcemaps inject /tmp/frontend
RUN if [ "IS_RELEASE" = true ]; then sentry-cli \
  --url ${SENTRY_URL} \
  --auth-token ${SENTRY_AUTH_TOKEN} \
  sourcemaps upload /tmp/frontend \
  --release ${VERSION} \
  --org ${SENTRY_ORG} \
  --project ${SENTRY_PROJECT} ; \
  else echo "Not sending sourcemap to sentry" ; \
  fi

######################
# Create final image #
######################
FROM azul/zulu-openjdk-alpine:17-jre

ARG VERSION
ENV VERSION=$VERSION

ARG ENV_PROFILE
ENV ENV_PROFILE=$ENV_PROFILE

ENV ENV_DB_URL=""

# Add bash
RUN apk add --no-cache bash gettext

RUN adduser -D monitorfish
USER monitorfish

EXPOSE 8880
EXPOSE 5000
EXPOSE 5001
WORKDIR /home/monitorfish

ENV JAVA_TOOL_OPTIONS="-Dcom.sun.management.jmxremote.ssl=false \
  -Dcom.sun.management.jmxremote.authenticate=false \
  -Dcom.sun.management.jmxremote.port=5000 \
  -Dcom.sun.management.jmxremote.rmi.port=5001 \
  -Dcom.sun.management.jmxremote.registry.ssl=false \
  -Dcom.sun.management.jmxremote.host=0.0.0.0 \
  -Djava.rmi.server.hostname=0.0.0.0"

# Copy files for the back
COPY --from=buildBack /tmp/build/libs/monitorfish-${VERSION}.jar /home/monitorfish
COPY infra/configurations /home/monitorfish/configurations/

USER monitorfish
# Copy files for the front
RUN mkdir /home/monitorfish/public
COPY --from=buildSourcemaps /tmp/frontend/build /home/monitorfish/public/

# Copy env-related files
COPY --from=buildFront /tmp/infra/docker/env.sh /home/monitorfish/
COPY --from=buildFront /tmp/frontend/runtime-env.js.template /home/monitorfish/runtime-env.js.template

# Add logs folder to be mounted as volume
RUN mkdir /home/monitorfish/logs

# Set up environment variable that define the root folder use for serving static files
# It must point to the front (React) files
ENV STATIC_FILES_PATH="/home/monitorfish/public"

# Default profile is for local. Can be overriden at start : docker run -e "SPRING_PROFILES_ACTIVE=prod"
ENV SPRING_PROFILES_ACTIVE=$ENV_PROFILE

RUN echo ${ENV_PROFILE}

USER root
RUN chown monitorfish /home/monitorfish/runtime-env.js.template
RUN chmod +r /home/monitorfish/runtime-env.js.template

USER root
RUN chown monitorfish /home/monitorfish/env.sh
RUN chown -R monitorfish /home/monitorfish/public
RUN chmod +x /home/monitorfish/env.sh


USER monitorfish

ENV VITE_GEOSERVER_LOCAL_URL=""

RUN ls -al public
RUN envsubst < runtime-env.js.template > public/env.js

ENTRYPOINT ["/home/monitorfish/env.sh"]

CMD exec java -Dspring.config.additional-location="/home/monitorfish/configurations/" -jar "monitorfish-${VERSION}.jar"

