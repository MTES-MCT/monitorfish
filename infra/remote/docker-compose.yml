version: '3'
services:
  db:
    image: timescale/timescaledb-postgis:1.7.4-pg11
    container_name: monitorfish_database
    user: ":${MONITORFISH_LOGS_AND_BACKUPS_GID}"
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    volumes:
      - db-data:/var/lib/postgresql/data
      - "${MONITORFISH_BACKUPS_FOLDER}:/opt/monitorfish_backups"
    ports:
      - 5432:5432
    networks:
      - backend
    restart: always

  app:
    image: docker.pkg.github.com/mtes-mct/monitorfish/monitorfish-app:$MONITORFISH_VERSION
    container_name: monitorfish_backend
    user: "monitorfish:${MONITORFISH_LOGS_AND_BACKUPS_GID}"
    environment:
      - ENV_DB_URL=jdbc:postgresql://db:5432/$POSTGRES_DB?user=$POSTGRES_USER&password=$POSTGRES_PASSWORD
      - VITE_GEOSERVER_REMOTE_URL=https://monitorfish.din.developpement-durable.gouv.fr
      - VITE_GEOSERVER_LOCAL_URL=https://10.56.205.25:8082
      - VITE_SENTRY_ENV=${SENTRY_ENV}
      - SENTRY_DSN=${SENTRY_DSN}
      - VITE_SENTRY_TRACING_ORIGINS=${SENTRY_TRACING_ORIGINS}
      - VITE_MONITORFISH_VERSION=${MONITORFISH_VERSION}
      - SPRING_PROFILES_ACTIVE=prod
      - HOST_IP=127.0.0.1
      - VITE_MONITORENV_URL=${MONITORENV_URL}
      - MONITORENV_URL=${MONITORENV_URL}
      - VITE_OIDC_ENABLED=$MONITORFISH_OIDC_ENABLED
      - MONITORFISH_OIDC_ENABLED=$MONITORFISH_OIDC_ENABLED
      - MONITORFISH_API_PROTECTED_API_KEY=$MONITORFISH_API_PROTECTED_API_KEY
    ports:
      - 8880:8880
      - 8000:8000
      - 5000:5000
      - 5001:5001
    volumes:
      - "${MONITORFISH_LOGS_FOLDER}:/home/monitorfish/logs"
    networks:
      - backend
    depends_on:
      - db
    restart: always
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:8880/api/v1/healthcheck || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "1024m"

  geoserver:
    container_name: monitorfish_geoserver
    image: kartoza/geoserver:2.18.0
    restart: on-failure:5
    ports:
      - 8001:8080
    volumes:
      - geoserver-data:/opt/geoserver/data_dir
    networks:
      - backend
    healthcheck:
      test: curl --fail -s http://localhost:8080/geoserver/index.html || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3

networks:
  backend:

volumes:
  db-data:
    driver: local
  geoserver-data:
    driver: local
