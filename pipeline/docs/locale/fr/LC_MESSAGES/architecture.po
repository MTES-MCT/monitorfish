# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Vincent Chéry & Loup Théron
# This file is distributed under the same license as the Monitorfish package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Vincent Chéry <vincent.chery@m4x.org>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Monitorfish\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-27 10:28+0200\n"
"PO-Revision-Date: 2021-08-23 14:48+0000\n"
"Last-Translator: Vincent Chéry <vincent.chery@m4x.org>, 2025\n"
"Language-Team: French (https://app.transifex.com/ministere-de-la-transition-ecologique-et-solidaire-1/teams/124045/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../source/architecture.rst:3 7765c514ab0943dfb74242bcaf5aa016
msgid "Architecture"
msgstr "Architecture"

#: ../source/architecture.rst:5 1f76ef88c1ca4e90ba53c7dccce2ecc1
msgid "Monitorfish is built around 3 main components :"
msgstr "Monitorfish comporte 3 composants principaux :"

#: ../source/architecture.rst:11 6701750691754daaa9940fcc22abc7f1
msgid ""
"It receives and collects data from several external systems. This diagram "
"gives an overview of the entire system :"
msgstr ""
"L'application reçoit et collecte des données provenant de plusieurs systèmes"
" externes. Ce diagramme donne un aperçu de l'ensemble du système :"

#: ../source/architecture.rst-1 c5e9ef74d31540fd8d98408864981a40
msgid "Architecture diagram"
msgstr "Schéma d'architecture"

#: ../source/architecture.rst:17 5c6e8e5f986e4fc7b27f8ebdfc847569
msgid ""
"The following sections give more details about the backend, frontend and "
"data pipeline components."
msgstr ""
"Les sections suivantes fournissent plus de détails sur les composants "
"backend, frontend et pipeline de données."

#: ../source/architecture.rst:24 dacb72d6d38f4392bc67c8fc17db5eeb
msgid "Back end"
msgstr "Back end"

#: ../source/architecture.rst:26 582949acbc014908b0f0a5b83387ee79
msgid "Kotlin"
msgstr "Kotlin"

#: ../source/architecture.rst:27 3f3d77fd646240158a647978947a975b
msgid "Spring Boot"
msgstr "Spring Boot"

#: ../source/architecture.rst:28 2c0ec79a905c48a0871218aabb1cdfa6
msgid "Flyway (database migration)"
msgstr "Flyway (migrations de base de données)"

#: ../source/architecture.rst:29 0be99ca0201844d39ffc6e2139f1aa07
msgid "PostgreSQL with PostGIS/TimescaleDB"
msgstr "PostgreSQL avec extensions PostGIS et TimescaleDB"

#: ../source/architecture.rst:30 f513dd9ef1f745f9919e9386906eced5
msgid "Tomcat (version 9.0.37)"
msgstr "Tomcat (version 9.0.37)"

#: ../source/architecture.rst:35 83702c1ca9f24b5eb80a1244276597f9
msgid "Front end"
msgstr "Front end"

#: ../source/architecture.rst:37 e353779ca269466ab0c6db183482c31d
msgid "Openlayers"
msgstr "Openlayers"

#: ../source/architecture.rst:38 d8fbdb8c921a42ec85c9fea5513995af
msgid "React"
msgstr "React"

#: ../source/architecture.rst:45 a83f99e41da14e089501c52104399057
msgid "Data pipeline"
msgstr "Pipeline de données"

#: ../source/architecture.rst:47 ee3dc0404e8d4e3988ab6d49e7c6e364
msgid "The data processing service executes python batch jobs to :"
msgstr "Le pipeline de données exécute des tâches en python pour :"

#: ../source/architecture.rst:49 bcd8c04052054c7693c59831aac8e474
msgid "pull data from external sources into the Monitorfish database (ETL)"
msgstr ""
"extraire des données de sources externes vers la base de données Monitorfish"
" (ETL)"

#: ../source/architecture.rst:50 d7d7b6c0d8904a4eae18c7966783d7d7
msgid ""
"process data in the Monitorfish database to enrich and update tables that "
"the backend makes available to the frontend through an API"
msgstr ""
"traiter les données de la base de données Monitorfish pour enrichir et "
"mettre à jour les tables que le backend met à la disposition du frontend par"
" le biais d'une API"

#: ../source/architecture.rst:51 de820e91f72b41c4b7f85a07fb34095c
msgid "publish data online"
msgstr "publier des données en ligne"

#: ../source/architecture.rst:54 8af0b89d9f60405bb39cc866192eb704
msgid "Database schema"
msgstr "Schéma de base de données"

#: ../source/architecture.rst:56 5a8a39fd591c4c9dbc0067d5eb3a77d3
msgid ""
"Database tables are created by the :ref:`back-end`. Jobs of the data "
"pipeline require tables to already exist and to have the right columns and "
"data types. It is therefore necessary to keep the back end and the data "
"pipeline applications \"in sync\". For this reason, the back end and the "
"data pipeline should always be deployed with the **same version number** "
"(see :ref:`environment_variables`)."
msgstr ""
"Les tables de base de données sont créées par le :ref:`back-end`. Les tâches"
" du pipeline de données exigent que les tables existent déjà et qu'elles "
"aient les bonnes colonnes et les bons types de données. Il est donc "
"nécessaire que les applications du back-end et du pipeline de données "
"restent \"synchronisées\". Pour cette raison, le back-end et le pipeline de "
"données doivent toujours être déployés avec le **même numéro de version** "
"(voir :ref:`environment_variables`)."

#: ../source/architecture.rst:61 52879a695d8c4072b8201af5610c0365
msgid "Orchestration"
msgstr "Orchestration"

#: ../source/architecture.rst:63 10b604ab158b45b8bfa9925f664a473a
msgid ""
"Batch jobs are orchestrated by `Prefect <https://prefect.io>`__. For more "
"information see `Prefect documentation <https://docs.prefect.io/v3/get-"
"started/>`__."
msgstr ""
"Les tâches par lots sont orchestrées par `Prefect <https://prefect.io>`__. "
"Pour plus d'informations, consultez la `documentation Prefect "
"<https://docs.prefect.io/v3/get-started/>`__."

#: ../source/architecture.rst:66 5280f0ac7242448ba350720ba3102b62
msgid ""
"The prefect UI enables administrators to monitor their execution, see the "
"logs and debug in case any flow run fails..."
msgstr ""
"L'interface utilisateur Prefect permet aux administrateurs de surveiller "
"leur exécution, de consulter les journaux et de déboguer en cas d'échec d'un"
" traitement..."

#: ../source/architecture.rst:69 05aee785bad24a899a2b286076f4baa2
msgid "Execution"
msgstr "Exécution"

#: ../source/architecture.rst:72 bf6aa6dbf58a45b88280e59369968778
msgid "Stack"
msgstr "Stack"

#: ../source/architecture.rst:74 89bc9627d5b84ead8cabc7eaafc78111
msgid ""
"The main tools used to extract data, process it in python and load it to the"
" PostgreSQL database of Monitorfish are :"
msgstr ""
"Les principaux outils utilisés pour extraire les données, les traiter en "
"python et les charger dans la base de données PostgreSQL de Monitorfish sont"
" :"

#: ../source/architecture.rst:76 12ab9e7cca6d4ba78c1d54bf99fc5df6
msgid "python 3"
msgstr "python 3"

#: ../source/architecture.rst:77 08995e37b73b430fb7cbf116a3df950c
msgid ""
"`SQLAlchemy <https://www.sqlalchemy.org/>`__ as a python SQL toolkit to "
"interact with SQL databases"
msgstr ""
"`SQLAlchemy <https://www.sqlalchemy.org/>`__ comme une boîte à outils SQL en"
" python pour interagir avec les bases de données SQL."

#: ../source/architecture.rst:78 24d99810f9dd448e9ace9178a1c1f277
msgid ""
"Database adapters `cx_Oracle <https://oracle.github.io/python-"
"cx_Oracle/>`__,  `psycopg2 <https://github.com/psycopg/psycopg2/>`__ and "
"`ClickHouse Connect <https://clickhouse.com/docs/integrations/python/>`__ "
"for connectivity to Oracle, PostgreSQL and ClickHouse databases respectively"
msgstr ""
"les adaptateurs de base de données `cx_Oracle "
"<https://oracle.github.io/python-cx_Oracle/>`__, `psycopg2 "
"<https://github.com/psycopg/psycopg2/>`__ et `ClickHouse Connect "
"<https://clickhouse.com/docs/integrations/python/>`__ pour la connectivité "
"aux bases de données Oracle, PostgreSQL et ClickHouse respectivement."

#: ../source/architecture.rst:80 6805360017824557b3cc26dfcfeac2cb
msgid ""
"`pandas <https://pandas.pydata.org/>`__ and `DuckDB <https://duckdb.org/>`__"
" for data manipulation in python"
msgstr ""
"`pandas <https://pandas.pydata.org/>`__ et `DuckDB <https://duckdb.org/>`__ "
"pour la manipulation de données en Python"

#: ../source/architecture.rst:81 2fd975c62c0641a9b53c753317af7d73
msgid ""
"the `prefect python library <https://github.com/prefecthq/prefect>`__ to "
"write batch jobs as flows of tasks"
msgstr ""
"la `librairie python prefect <https://github.com/prefecthq/prefect>`__ pour "
"écrire les tâches de traitement de données en tant que flows"

#: ../source/architecture.rst:84 21e486faae9048c2810f1800ab8c5fd4
msgid "Flows : one for each job"
msgstr "Flows : un pour chaque traitement de données"

#: ../source/architecture.rst:86 d0ace072b5c54ee491f00a0f5f4e3f2b
msgid ""
"Batch jobs are written in python as prefect :ref:`flows <flows>` : each flow"
" is responsible for one particular task, such as updating the ``vessels`` "
"referencial or refreshing the table of ``last_positions``."
msgstr ""
"Les traitements de données sont écrits en python sous forme de :ref:`flows` "
"prefect : chaque flow est responsable d'une tâche particulière, comme la "
"mise à jour du référentiel ``vessels`` ou le rafraîchissement de la table "
"des ``last_positions``."

#: ../source/architecture.rst:90 4a91b2938dc94ee7a89be3cd5de2e110
msgid "Execution in a dockerized service"
msgstr "Exécution dans un service dockerisé"

#: ../source/architecture.rst:92 05d4eabfd07c49209839c85bb712edbc
msgid ""
"A `prefect worker <https://docs.prefect.io/v3/concepts/workers>`__ "
"constantly polls the Prefect API in order to know if any flow must be "
"executed. When a flow must be executed, perfect server tells the worker, "
"which spawns a runner that runs the flow in an ephemeral docker container."
msgstr ""
"Un `worker Prefect <https://docs.prefect.io/v3/concepts/workers>`__ "
"interroge en permanence l'API Prefect afin de savoir si un *flow* doit être "
"exécuté. Lorsqu'un *flow* doit être exécuté, Perfect Server en informe le "
"*worker*, qui lance un runner qui exécute le *flow* dans un conteneur Docker"
" éphémère."
